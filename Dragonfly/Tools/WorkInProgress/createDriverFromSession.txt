package snippet;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.Map;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.Command;
import org.openqa.selenium.remote.CommandExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.HttpCommandExecutor;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.Response;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.remote.http.JsonHttpCommandCodec;
import org.openqa.selenium.remote.http.W3CHttpCommandCodec;
import org.openqa.selenium.remote.http.W3CHttpResponseCodec;
import com.google.common.base.Splitter;

class Snippet {
	public static void main(String[] args) {
		new Snippet().testBrowser();
	}
	boolean blnAttach;
	String browserName = null;
	DesiredCapabilities capabilities = new DesiredCapabilities();
	WebDriver objWebDriver = null;
	String pathCapabilitiesMap = "c:\\temp\\map.txt";
	String pathSessionId = "c:\\temp\\SessionId.txt";
	String pathURL = "c:\\temp\\url.ser";
	Map<String, String> theMap;

	private void createDriverFromSession(String sessionId, URL command_executor) {
		CommandExecutor executor = new HttpCommandExecutor(command_executor) {
			@Override
			public Response execute(Command command) throws IOException {
				Response response = null;
				//System.out.println("command.getName() " + command.getName());
				if (command.getName() == "newSession") {
					response = new Response();
					response.setSessionId(sessionId);
					response.setStatus(0);
					response.setValue(theMap);
					try {
						Field commandCodec = null;
						commandCodec = this.getClass().getSuperclass().getDeclaredField("commandCodec");
						commandCodec.setAccessible(true);
						switch (browserName) {
						case "chrome":
							commandCodec.set(this, new JsonHttpCommandCodec());
							break;
						case "firefox":
							commandCodec.set(this, new W3CHttpCommandCodec());
							break;
						case "ie_32":
						case "ie_64":
							commandCodec.set(this, new W3CHttpCommandCodec());
							break;
						case "opera":
							break;
						case "safari":
							break;
						}
						Field responseCodec = null;
						responseCodec = this.getClass().getSuperclass().getDeclaredField("responseCodec");
						responseCodec.setAccessible(true);
						responseCodec.set(this, new W3CHttpResponseCodec());
					} catch (NoSuchFieldException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}
				} else {
					response = super.execute(command);
				}
				return response;
			}
		};
		objWebDriver = new RemoteWebDriver(executor, new DesiredCapabilities());
	}

	private void deleteFile(String filePath) {
		File fileToDelete = new File(filePath);
		if (fileToDelete.exists()) {
			fileToDelete.delete();
		}
	}

	@SuppressWarnings("unchecked")
	private void launchBrowser() {
		URL url = null;
		SessionId session_id;
		String sessionId = "";
		switch (browserName) {
		case "chrome":
			ChromeOptions options = new ChromeOptions();
			options.addArguments("test-type");
			options.addArguments("disable-popup-blocking");
			options.addArguments("disable-infobars");
			//options.addArguments("--start-fullscreen");
			capabilities.setCapability(ChromeOptions.CAPABILITY, options);
			if (blnAttach == false) {
				System.setProperty("webdriver.chrome.driver", "C:\\SeleniumTest\\chromedriver_2.33\\chromedriver.exe");
				objWebDriver = new ChromeDriver(capabilities);
			}
			break;
		case "firefox":
			if (blnAttach == false) {
				System.setProperty("webdriver.gecko.driver", "C:\\SeleniumTest\\geckodriver_0.19.1\\geckodriver.exe");
				objWebDriver = new FirefoxDriver(capabilities);
			}
			break;
		case "ie_32":
			capabilities.setJavascriptEnabled(true);
			capabilities.setCapability(InternetExplorerDriver.UNEXPECTED_ALERT_BEHAVIOR, "ignore");
			capabilities.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION, true);
			capabilities.setCapability(InternetExplorerDriver.REQUIRE_WINDOW_FOCUS, true);
			capabilities.setCapability(InternetExplorerDriver.INITIAL_BROWSER_URL, "about:blank");
			if (blnAttach == false) {
				System.setProperty("webdriver.ie.driver", "C:\\SeleniumTest\\IEDriverServer_x32_3.7.0\\IEDriverServer.exe");
				objWebDriver = new InternetExplorerDriver(capabilities);
			}
			break;
		case "ie_64":
			if (blnAttach == false) {
				System.setProperty("webdriver.ie.driver", "C:\\SeleniumTest\\IEDriverServer_x64_3.7.0\\IEDriverServer.exe");
				objWebDriver = new InternetExplorerDriver(capabilities);
			}
			break;
		case "opera":
			break;
		case "safari":
			break;
		}
		if (blnAttach == false) {
			deleteFile(pathSessionId);
			deleteFile(pathURL);
			deleteFile(pathCapabilitiesMap);
			//System.exit(0);
			HttpCommandExecutor executor = (HttpCommandExecutor) ((RemoteWebDriver) objWebDriver).getCommandExecutor();
			url = executor.getAddressOfRemoteServer();
			try {
				FileOutputStream fosURL = new FileOutputStream(pathURL);
				ObjectOutputStream oosURL = new ObjectOutputStream(fosURL);
				oosURL.writeObject(url);
				oosURL.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			session_id = ((RemoteWebDriver) objWebDriver).getSessionId();
			writeFile(session_id.toString(), pathSessionId);
			String strMapFile = null;
			Map<String, String> theMap2;
			theMap2 = (Map<String, String>) ((RemoteWebDriver) objWebDriver).getCapabilities().asMap();
			for (String key : theMap2.keySet()) {
				if (strMapFile != null) {
					strMapFile = strMapFile + "~~~~~~~~~~" + key + "++++++++++" + String.valueOf(theMap2.get(key));
				} else {
					strMapFile = key + "++++++++++" + String.valueOf(theMap2.get(key));
				}
			}
			writeFile(strMapFile, pathCapabilitiesMap);
		} else {
			try {
				FileInputStream fisURL = new FileInputStream(pathURL);
				ObjectInputStream oisURL = new ObjectInputStream(fisURL);
				url = (URL) oisURL.readObject();
				oisURL.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			sessionId = readFile(pathSessionId);
			theMap = splitToMap(readFile(pathCapabilitiesMap));
			for (String key : theMap.keySet()) {
			}
			createDriverFromSession(sessionId, url);
		}
	}

	private String readFile(String pathFile) {
		String strReturn = null;
		BufferedReader objBufferedRead = null;
		try {
			objBufferedRead = new BufferedReader(new FileReader(pathFile));
			strReturn = objBufferedRead.readLine();
			objBufferedRead.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return strReturn;
	}

	private Map<String, String> splitToMap(String in) {
		return Splitter.on("~~~~~~~~~~").withKeyValueSeparator("++++++++++").split(in);
	}

	@SuppressWarnings("unchecked")
	private void testBrowser() {
		//blnAttach = false;
		blnAttach = true;
		//browserName = "chrome";
		//browserName = "firefox";
		browserName = "ie_32";
		//browserName = "ie_64";
		//browserName = "opera";
		//browserName = "safari";
		//
		try {
			launchBrowser();
			if (blnAttach == true) {
				objWebDriver.manage().window().maximize();
				objWebDriver.get("https://www.google.com/");
				objWebDriver.findElement(By.name("q")).sendKeys("Selenium Grid Tutorial");
				objWebDriver.findElement(By.name("q")).sendKeys(Keys.ENTER);
			} else {
				objWebDriver.manage().window().maximize();
				objWebDriver.get("https://www.google.com/");
				objWebDriver.findElement(By.name("q")).sendKeys("Selenium Grid Tutorial");
				objWebDriver.findElement(By.name("q")).sendKeys(Keys.ENTER);
				//objWebDriver.manage().window().fullscreen();
				objWebDriver.get("http://www.seleniumhq.org/");
				objWebDriver.get("https://www.google.com/");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void writeFile(String stringToWrite, String pathFile) {
		try {
			BufferedWriter objBufferedWriter = new BufferedWriter(new FileWriter(pathFile));
			objBufferedWriter.write(stringToWrite.toString());
			objBufferedWriter.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
